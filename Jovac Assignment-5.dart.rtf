{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import 'package:flutter/material.dart';\
import 'package:provider/provider.dart';\
\
/// DATA_MODEL\
/// Represents the complete feedback form data.\
class FeedbackFormData extends ChangeNotifier \{\
  String _name;\
  String _rollNumber;\
  String _feedbackText;\
  double _experienceRating; // Default rating between 1.0 and 5.0\
  String? _feedbackCategory;\
  Map<String, bool> _likedFeatures;\
  bool _termsAgreed;\
\
  FeedbackFormData()\
      : _name = '',\
        _rollNumber = '',\
        _feedbackText = '',\
        _experienceRating = 3.0,\
        _feedbackCategory = null,\
        _likedFeatures = <String, bool>\{\
          'User Interface': false,\
          'Performance': false,\
          'Features': false,\
          'Stability': false,\
        \},\
        _termsAgreed = false;\
\
  String get name => _name;\
  String get rollNumber => _rollNumber;\
  String get feedbackText => _feedbackText;\
  double get experienceRating => _experienceRating;\
  String? get feedbackCategory => _feedbackCategory;\
  Map<String, bool> get likedFeatures => _likedFeatures;\
  bool get termsAgreed => _termsAgreed;\
\
  void updateName(String value) \{\
    if (_name != value) \{\
      _name = value;\
      notifyListeners();\
    \}\
  \}\
\
  void updateRollNumber(String value) \{\
    if (_rollNumber != value) \{\
      _rollNumber = value;\
      notifyListeners();\
    \}\
  \}\
\
  void updateFeedbackText(String value) \{\
    if (_feedbackText != value) \{\
      _feedbackText = value;\
      notifyListeners();\
    \}\
  \}\
\
  void updateExperienceRating(double value) \{\
    if (_experienceRating != value) \{\
      _experienceRating = value;\
      notifyListeners();\
    \}\
  \}\
\
  void updateFeedbackCategory(String? value) \{\
    if (_feedbackCategory != value) \{\
      _feedbackCategory = value;\
      notifyListeners();\
    \}\
  \}\
\
  void toggleLikedFeature(String featureName, bool? value) \{\
    if (value != null && _likedFeatures[featureName] != value) \{\
      _likedFeatures[featureName] = value;\
      notifyListeners();\
    \}\
  \}\
\
  void toggleTermsAgreed(bool? value) \{\
    if (value != null && _termsAgreed != value) \{\
      _termsAgreed = value;\
      notifyListeners();\
    \}\
  \}\
\
  Map<String, dynamic> getFormData() \{\
    return <String, dynamic>\{\
      'name': _name,\
      'rollNumber': _rollNumber,\
      'feedbackText': _feedbackText,\
      'experienceRating': _experienceRating,\
      'feedbackCategory': _feedbackCategory,\
      'likedFeatures': _likedFeatures.entries\
          .where((MapEntry<String, bool> entry) => entry.value)\
          .map<String>((MapEntry<String, bool> entry) => entry.key)\
          .toList(),\
      'termsAgreed': _termsAgreed,\
    \};\
  \}\
\
  void resetForm() \{\
    _name = '';\
    _rollNumber = '';\
    _feedbackText = '';\
    _experienceRating = 3.0;\
    _feedbackCategory = null;\
    _likedFeatures = <String, bool>\{\
      'User Interface': false,\
      'Performance': false,\
      'Features': false,\
      'Stability': false,\
    \};\
    _termsAgreed = false;\
    notifyListeners();\
  \}\
\}\
\
void main() \{\
  runApp(\
    ChangeNotifierProvider<FeedbackFormData>(\
      create: (BuildContext context) => FeedbackFormData(),\
      builder: (BuildContext context, Widget? child) => const MyApp(),\
    ),\
  );\
\}\
\
class MyApp extends StatelessWidget \{\
  const MyApp(\{super.key\});\
\
  @override\
  Widget build(BuildContext context) \{\
    return MaterialApp(\
      title: 'Feedback Form',\
      debugShowCheckedModeBanner: false,\
      theme: ThemeData.dark().copyWith(\
        scaffoldBackgroundColor: const Color(0xFF1F1F1F),\
        colorScheme: const ColorScheme.dark().copyWith(\
          primary: const Color(0xFF3D9C6C), // Green for accents\
          secondary: const Color(0xFF3D9C6C),\
          surface: const Color(0xFF2B2B2B), // Slightly lighter for input fields\
          error: const Color(0xFFE57373), // Red for errors\
        ),\
        textTheme: const TextTheme(\
          bodyLarge: TextStyle(color: Colors.white),\
          bodyMedium: TextStyle(color: Colors.white70),\
          titleLarge: TextStyle(color: Colors.white),\
          titleMedium: TextStyle(color: Colors.white),\
          titleSmall: TextStyle(color: Colors.white),\
          displayLarge: TextStyle(color: Colors.white),\
          displayMedium: TextStyle(color: Colors.white),\
          displaySmall: TextStyle(color: Colors.white),\
          headlineLarge: TextStyle(color: Colors.white),\
          headlineMedium: TextStyle(color: Colors.white),\
          headlineSmall: TextStyle(color: Colors.white),\
          labelLarge: TextStyle(color: Colors.white),\
          labelMedium: TextStyle(color: Colors.white),\
          labelSmall: TextStyle(color: Colors.white),\
        ).apply(\
          bodyColor: Colors.white,\
          displayColor: Colors.white,\
        ),\
        inputDecorationTheme: InputDecorationTheme(\
          filled: true,\
          fillColor: const Color(0xFF2B2B2B), // Background color for input fields\
          border: OutlineInputBorder(\
            borderRadius: BorderRadius.circular(12.0),\
            borderSide: BorderSide.none, // No border by default with fill\
          ),\
          enabledBorder: OutlineInputBorder(\
            borderRadius: BorderRadius.circular(12.0),\
            borderSide: const BorderSide(color: Colors.transparent),\
          ),\
          focusedBorder: OutlineInputBorder(\
            borderRadius: BorderRadius.circular(12.0),\
            borderSide: const BorderSide(color: Color(0xFF3D9C6C), width: 2.0),\
          ),\
          errorBorder: OutlineInputBorder(\
            borderRadius: BorderRadius.circular(12.0),\
            borderSide: const BorderSide(color: Color(0xFFE57373), width: 2.0),\
          ),\
          focusedErrorBorder: OutlineInputBorder(\
            borderRadius: BorderRadius.circular(12.0),\
            borderSide: const BorderSide(color: Color(0xFFE57373), width: 2.0),\
          ),\
          labelStyle: const TextStyle(color: Colors.white70),\
          hintStyle: const TextStyle(color: Colors.white54),\
          contentPadding:\
              const EdgeInsets.symmetric(vertical: 16.0, horizontal: 16.0),\
        ),\
        sliderTheme: SliderThemeData(\
          trackHeight: 8.0,\
          activeTrackColor: const Color(0xFF3D9C6C),\
          inactiveTrackColor: Colors.grey[700],\
          thumbColor: Colors.white,\
          // ignore: deprecated_member_use\
          overlayColor: const Color(0xFF3D9C6C).withOpacity(0.2),\
          valueIndicatorColor: const Color(0xFF3D9C6C),\
          valueIndicatorTextStyle: const TextStyle(color: Colors.white),\
          showValueIndicator: ShowValueIndicator.always,\
        ),\
        checkboxTheme: CheckboxThemeData(\
          fillColor: WidgetStateProperty.resolveWith<Color>(\
              (Set<WidgetState> states) \{\
            if (states.contains(WidgetState.selected)) \{\
              return const Color(0xFF3D9C6C);\
            \}\
            return Colors.grey[700]!;\
          \}),\
          checkColor: WidgetStateProperty.all<Color>(Colors.white),\
          shape: RoundedRectangleBorder(\
            borderRadius: BorderRadius.circular(4.0),\
          ),\
          side: const BorderSide(color: Colors.white70, width: 2),\
        ),\
        elevatedButtonTheme: ElevatedButtonThemeData(\
          style: ElevatedButton.styleFrom(\
            backgroundColor: const Color(0xFF3D9C6C),\
            foregroundColor: Colors.white,\
            padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),\
            shape: RoundedRectangleBorder(\
              borderRadius: BorderRadius.circular(24),\
            ),\
            elevation: 0,\
          ),\
        ),\
      ),\
      home: const FeedbackFormScreen(),\
    );\
  \}\
\}\
\
/// The main screen displaying the feedback form.\
class FeedbackFormScreen extends StatefulWidget \{\
  const FeedbackFormScreen(\{super.key\});\
\
  @override\
  State<FeedbackFormScreen> createState() => _FeedbackFormScreenState();\
\}\
\
class _FeedbackFormScreenState extends State<FeedbackFormScreen> \{\
  late TextEditingController _nameController;\
  late TextEditingController _rollNumberController;\
  late TextEditingController _feedbackTextController;\
\
  @override\
  void initState() \{\
    super.initState();\
    _nameController = TextEditingController();\
    _rollNumberController = TextEditingController();\
    _feedbackTextController = TextEditingController();\
\
    // Listen to changes in the FeedbackFormData to update controllers on reset\
    context.read<FeedbackFormData>().addListener(_onFormDataChanged);\
  \}\
\
  @override\
  void dispose() \{\
    _nameController.dispose();\
    _rollNumberController.dispose();\
    _feedbackTextController.dispose();\
    context.read<FeedbackFormData>().removeListener(_onFormDataChanged);\
    super.dispose();\
  \}\
\
  void _onFormDataChanged() \{\
    final FeedbackFormData formData = context.read<FeedbackFormData>();\
    // If the form data is reset, clear the text controllers\
    if (formData.name.isEmpty &&\
        formData.rollNumber.isEmpty &&\
        formData.feedbackText.isEmpty) \{\
      _nameController.clear();\
      _rollNumberController.clear();\
      _feedbackTextController.clear();\
    \}\
  \}\
\
  void _submitForm() \{\
    final FeedbackFormData formData = context.read<FeedbackFormData>();\
\
    if (!formData.termsAgreed) \{\
      ScaffoldMessenger.of(context).showSnackBar(\
        SnackBar(\
          content: const Text('Please agree to the terms and conditions.'),\
          backgroundColor: Theme.of(context).colorScheme.error,\
          duration: const Duration(seconds: 3),\
        ),\
      );\
      return;\
    \}\
\
    final Map<String, dynamic> data = formData.getFormData();\
    debugPrint('Form Submitted:');\
    data.forEach((String key, dynamic value) \{\
      debugPrint('$key: $value');\
    \});\
\
    ScaffoldMessenger.of(context).showSnackBar(\
      SnackBar(\
        content: const Text('Feedback submitted successfully!'),\
        backgroundColor: Theme.of(context).colorScheme.primary,\
        duration: const Duration(seconds: 3),\
      ),\
    );\
\
    formData.resetForm();\
  \}\
\
  @override\
  Widget build(BuildContext context) \{\
    final FeedbackFormData formData = context.watch<FeedbackFormData>();\
\
    return Scaffold(\
      appBar: AppBar(\
        title: const Text('Feedback Form'),\
        centerTitle: true,\
        backgroundColor: Colors.transparent,\
        elevation: 0,\
      ),\
      body: SingleChildScrollView(\
        padding: const EdgeInsets.all(16.0),\
        child: Column(\
          crossAxisAlignment: CrossAxisAlignment.start,\
          children: <Widget>[\
            const _SectionTitle(title: 'Your Details'),\
            const SizedBox(height: 16),\
            _CustomTextField(\
              controller: _nameController,\
              labelText: 'Name',\
              hintText: 'Enter your full name',\
              onChanged: (String value) =>\
                  context.read<FeedbackFormData>().updateName(value),\
              keyboardType: TextInputType.name,\
            ),\
            const SizedBox(height: 16),\
            _CustomTextField(\
              controller: _rollNumberController,\
              labelText: 'Roll Number',\
              hintText: 'Enter your roll number',\
              onChanged: (String value) =>\
                  context.read<FeedbackFormData>().updateRollNumber(value),\
              keyboardType: TextInputType.number,\
            ),\
            const SizedBox(height: 32),\
\
            const _SectionTitle(title: 'Experience Rating'),\
            const SizedBox(height: 16),\
            _ExperienceRatingSlider(\
              rating: formData.experienceRating,\
              onChanged: (double value) =>\
                  context.read<FeedbackFormData>().updateExperienceRating(value),\
            ),\
            const SizedBox(height: 32),\
\
            const _SectionTitle(title: 'Feedback Category'),\
            const SizedBox(height: 16),\
            _FeedbackCategoryDropdown(\
              selectedCategory: formData.feedbackCategory,\
              onChanged: (String? value) =>\
                  context.read<FeedbackFormData>().updateFeedbackCategory(value),\
            ),\
            const SizedBox(height: 32),\
\
            const _SectionTitle(title: 'Features You Liked'),\
            const SizedBox(height: 16),\
            _LikedFeaturesCheckboxes(\
              likedFeatures: formData.likedFeatures,\
              onChanged: (String feature, bool? value) =>\
                  context.read<FeedbackFormData>().toggleLikedFeature(feature, value),\
            ),\
            const SizedBox(height: 32),\
\
            const _SectionTitle(title: 'Your Feedback'),\
            const SizedBox(height: 16),\
            _CustomTextField(\
              controller: _feedbackTextController,\
              labelText: 'Feedback',\
              hintText: 'Share your thoughts and suggestions...',\
              onChanged: (String value) =>\
                  context.read<FeedbackFormData>().updateFeedbackText(value),\
              maxLines: 5,\
              keyboardType: TextInputType.multiline,\
            ),\
            const SizedBox(height: 32),\
\
            _TermsAndConditionsCheckbox(\
              isAgreed: formData.termsAgreed,\
              onChanged: (bool? value) =>\
                  context.read<FeedbackFormData>().toggleTermsAgreed(value),\
            ),\
            const SizedBox(height: 32),\
\
            SizedBox(\
              width: double.infinity,\
              child: ElevatedButton(\
                onPressed: _submitForm,\
                child: const Text('Submit Feedback'),\
              ),\
            ),\
            const SizedBox(height: 16), // Bottom padding\
          ],\
        ),\
      ),\
    );\
  \}\
\}\
\
class _CustomTextField extends StatelessWidget \{\
  final TextEditingController controller;\
  final String labelText;\
  final String? hintText;\
  final ValueChanged<String> onChanged;\
  final TextInputType keyboardType;\
  final int? maxLines;\
\
  const _CustomTextField(\{\
    required this.controller,\
    required this.labelText,\
    this.hintText,\
    required this.onChanged,\
    this.keyboardType = TextInputType.text,\
    this.maxLines = 1,\
  \});\
\
  @override\
  Widget build(BuildContext context) \{\
    return TextFormField(\
      controller: controller,\
      decoration: InputDecoration(\
        labelText: labelText,\
        hintText: hintText,\
      ),\
      onChanged: onChanged,\
      keyboardType: keyboardType,\
      maxLines: maxLines,\
      style: Theme.of(context).textTheme.bodyMedium,\
      cursorColor: Theme.of(context).colorScheme.primary,\
    );\
  \}\
\}\
\
class _SectionTitle extends StatelessWidget \{\
  final String title;\
\
  const _SectionTitle(\{required this.title\});\
\
  @override\
  Widget build(BuildContext context) \{\
    return Text(\
      title,\
      style: const TextStyle(\
        fontSize: 22,\
        fontWeight: FontWeight.bold,\
        color: Colors.white,\
      ),\
    );\
  \}\
\}\
\
class _ExperienceRatingSlider extends StatelessWidget \{\
  final double rating;\
  final ValueChanged<double> onChanged;\
\
  const _ExperienceRatingSlider(\{\
    required this.rating,\
    required this.onChanged,\
  \});\
\
  @override\
  Widget build(BuildContext context) \{\
    return Column(\
      children: <Widget>[\
        Slider(\
          value: rating,\
          min: 1.0,\
          max: 5.0,\
          divisions: 4,\
          onChanged: onChanged,\
          label: rating.round().toString(),\
        ),\
        Row(\
          mainAxisAlignment: MainAxisAlignment.spaceBetween,\
          children: const <Widget>[\
            Text('1 (Poor)', style: TextStyle(color: Colors.white70)),\
            Text('5 (Excellent)', style: TextStyle(color: Colors.white70)),\
          ],\
        ),\
      ],\
    );\
  \}\
\}\
\
class _FeedbackCategoryDropdown extends StatelessWidget \{\
  final String? selectedCategory;\
  final ValueChanged<String?> onChanged;\
\
  static const List<String> _categories = <String>[\
    'General',\
    'Bug Report',\
    'Feature Request',\
    'Performance',\
    'Usability',\
  ];\
\
  const _FeedbackCategoryDropdown(\{\
    required this.selectedCategory,\
    required this.onChanged,\
  \});\
\
  @override\
  Widget build(BuildContext context) \{\
    return DropdownButtonFormField<String>(\
      decoration: const InputDecoration(\
        labelText: 'Category',\
        hintText: 'Select a feedback category',\
      ),\
      value: selectedCategory,\
      items: _categories.map<DropdownMenuItem<String>>((String category) \{\
        return DropdownMenuItem<String>(\
          value: category,\
          child: Text(category),\
        );\
      \}).toList(),\
      onChanged: onChanged,\
      style: Theme.of(context).textTheme.bodyMedium,\
      iconEnabledColor: Theme.of(context).colorScheme.primary,\
      dropdownColor: Theme.of(context).colorScheme.surface,\
    );\
  \}\
\}\
\
class _LikedFeaturesCheckboxes extends StatelessWidget \{\
  final Map<String, bool> likedFeatures;\
  final Function(String feature, bool? value) onChanged;\
\
  const _LikedFeaturesCheckboxes(\{\
    required this.likedFeatures,\
    required this.onChanged,\
  \});\
\
  @override\
  Widget build(BuildContext context) \{\
    return Column(\
      children: likedFeatures.entries.map<Widget>((MapEntry<String, bool> entry) \{\
        final String featureName = entry.key;\
        final bool isChecked = entry.value;\
        return Padding(\
          padding: const EdgeInsets.symmetric(vertical: 4.0),\
          child: CheckboxListTile(\
            title: Text(featureName),\
            value: isChecked,\
            onChanged: (bool? newValue) => onChanged(featureName, newValue),\
            controlAffinity: ListTileControlAffinity.leading,\
            activeColor: Theme.of(context).colorScheme.primary,\
            checkColor: Colors.white,\
            // ignore: deprecated_member_use\
            tileColor: Theme.of(context).colorScheme.surface.withOpacity(0.5),\
            shape: RoundedRectangleBorder(\
              borderRadius: BorderRadius.circular(8.0),\
            ),\
            contentPadding:\
                const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),\
          ),\
        );\
      \}).toList(),\
    );\
  \}\
\}\
\
class _TermsAndConditionsCheckbox extends StatelessWidget \{\
  final bool isAgreed;\
  final ValueChanged<bool?> onChanged;\
\
  const _TermsAndConditionsCheckbox(\{\
    required this.isAgreed,\
    required this.onChanged,\
  \});\
\
  @override\
  Widget build(BuildContext context) \{\
    return Row(\
      children: <Widget>[\
        SizedBox(\
          width: 24.0,\
          height: 24.0,\
          child: Checkbox(\
            value: isAgreed,\
            onChanged: onChanged,\
            activeColor: Theme.of(context).colorScheme.primary,\
            checkColor: Colors.white,\
            side: const BorderSide(color: Colors.white70, width: 2),\
          ),\
        ),\
        const SizedBox(width: 8),\
        Expanded(\
          child: Text(\
            'I agree to the terms and conditions.',\
            style: Theme.of(context).textTheme.bodyMedium,\
          ),\
        ),\
      ],\
    );\
  \}\
\}}